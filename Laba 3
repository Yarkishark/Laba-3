"""С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц, B,C,D,E 
заполняется случайным образом целыми числами в интервале [-10,10]. Для тестирования использовать не случайное заполнение, а целенаправленное. 
Вид матрицы А
Е	В
D	С
Для простоты все индексы в подматрицах относительные.
Формируется матрица F следующим образом: если в Е количество чисел, больших К в четных столбцах в области 1 больше, чем сумма 
чисел в нечетных строках в области 3, то поменять в Е симметрично области 2 и 3 местами, иначе В и С поменять местами несимметрично. 
При этом матрица А не меняется. После чего вычисляется выражение: A*F– K*AT . Выводятся по мере формирования А, F и 
все матричные операции последовательно."""

import random

def transpose_matrix(matrix):
    result = [[0 for _ in range(len(matrix))] for _ in range(len(matrix[0]))]
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            result[j][i] = matrix[i][j]
    return result

K = int(input("Введите значение K: "))

while True:
    N = int(input("Введите значение N: "))
    if N >= 6 and N % 2 == 0:
        break
    else:
        print("Пожалуйста, введите размер/ранг матрицы (N) число больше/равно 6 и четное число для равных по размеру подматриц")

E = [[0] * (N // 2) for _ in range(N // 2)]
B = [[0] * (N // 2) for _ in range(N // 2)]
C = [[0] * (N // 2) for _ in range(N // 2)]
D = [[0] * (N // 2) for _ in range(N // 2)]
for i in range(N // 2):
    for j in range(N // 2):
        E[i][j] = random.randint(-10, 10)
        B[i][j] = random.randint(-10, 10)
        C[i][j] = random.randint(-10, 10)
        D[i][j] = random.randint(-10, 10)

A = [[0] * N for _ in range(N)]
for i in range(N // 2):
    for j in range(N // 2):
        A[i][j] = E[i][j]
for i in range(N // 2, N):
    for j in range(N // 2):
        A[i][j] = D[i - N // 2][j]
for i in range(N // 2):
    for j in range(N // 2, N):
        A[i][j] = B[i][j - N // 2]
for i in range(N // 2, N):
    for j in range(N // 2, N):
        A[i][j] = C[i - N // 2][j - N // 2]

print("Матрица A: ")
for i in range(len(A)):
    for j in range(len(A)):
        print("{:4d}".format(A[i][j]), end=' ')
    print()
print()

count = 0
'1 область в E'
for i in range((N // 2)):
    for j in range(N // 4):
        if i < len(E) and j < len(E[i]):
            if E[i][j] > K:
                count += 1
print("Количество чисел больше K в четных столбцах области 1:", count)

total_sum = 0
'3 область в E'
for i in range((N // 2) // 2, N // 2):
    for j in range((N // 2) - i - 1, i + 1):
        if i < len(E) and j < len(E[i]):
            if j % 2 != 0:
                total_sum += E[i][j]
print("Сумма элементов в нечетных строках области 3:", total_sum)

F = [[0] * N for _ in range(N)]
if count > total_sum:
    change = [[False] * (N // 2) for _ in range(N // 2)]
    for i in range(len(E)):
        for j in range(len(E)):
            if i + j >= len(E) - 1 and change[i][j] == False:
                E[i][j], E[j][i] = E[j][i], E[i][j]
                change[i][j] = change[j][i] = True
    for i in range(N // 2):
        for j in range(N // 2):
            F[i][j] = E[i][j]
    for i in range(N // 2, N):
        for j in range(N // 2):
            F[i][j] = D[i - N // 2][j]
    for i in range(N // 2):
        for j in range(N // 2, N):
            F[i][j] = B[i][j - N // 2]
    for i in range(N // 2, N):
        for j in range(N // 2, N):
            F[i][j] = C[i - N // 2][j - N // 2]
else:
    for i in range(N // 2):
        for j in range(N // 2):
            F[i][j] = E[i][j]
    for i in range(N // 2, N):
        for j in range(N // 2):
            F[i][j] = D[i - N // 2][j]
    for i in range(N // 2, N):
        for j in range(N // 2, N):
            F[i][j] = B[i - N // 2][j - N // 2]
    for i in range(N // 2):
        for j in range(N // 2, N):
            F[i][j] = C[i][j - N // 2]

print("Матрица F, созданная по условию: ")
for i in range(len(F)):
    for j in range(len(F)):
        print("{:4d}".format(F[i][j]), end=' ')
    print()
print()

change = [[False] * N for _ in range(N)]
for i in range(len(F)):
    for j in range(len(F)):
        if change[i][j] == False:
            F[i][j], F[j][i] = F[j][i], F[i][j]
            change[i][j] = change[j][i] = True

A_transposed = transpose_matrix(A)
result_matrix = [[A[i][j]*F[i][j] - K*A_transposed[i][j] for j in range(N)] for i in range(N)]
print("Результат выражения A*F - K*A^T:")
for row in result_matrix:
    print(row)
