С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц, B,C,D,E 
заполняется случайным образом целыми числами в интервале [-10,10]. Для тестирования использовать не случайное заполнение, а целенаправленное. Для простоты все индексы в подматрицах относительные. Библиотечными методами пользоваться нельзя.
Формируется матрица F следующим образом: если в Е количество чисел, больших К в четных столбцах в области 1 больше, чем сумма чисел в нечетных строках в области 3, то поменять в Е симметрично области 1 и 3 местами, иначе В и С поменять местами несимметрично. 
При этом матрица А не меняется. После чего вычисляется выражение: A*F– K*AT . Выводятся по мере формирования А, F и все матричные операции последовательно.

import random

def fill_matrix(A, B, C, D, E, N):
    for i in range(N//2):
        for j in range(N//2):
            A[i][j] = E[i][j]
            A[i][j+N//2] = B[i][j]
            A[i+N//2][j] = D[i][j]
            A[i+N//2][j+N//2] = C[i][j]

def count_greater_than_K(matrix, K, area):
    count = 0
    for i in range(len(area)):
        for j in range(len(area[0])):
            if matrix[i][j] > K:
                count += 1
    return count

def swap_submatrices(matrix, area1, area2):
    for i in range(len(area1)):
        for j in range(len(area1[0])):
            matrix[area1[0]+i][area1[1]+j], matrix[area2[0]+i][area2[1]+j] = matrix[area2[0]+i][area2[1]+j], matrix[area1[0]+i][area1[1]+j]

N = int(input("Введите размер матрицы N: "))
K = int(input("Введите число K: "))

A = [[0 for _ in range(N)] for _ in range(N)]
B = [[random.randint(-10, 10) for _ in range(N//2)] for _ in range(N//2)]
C = [[random.randint(-10, 10) for _ in range(N//2)] for _ in range(N//2)]
D = [[random.randint(-10, 10) for _ in range(N//2)] for _ in range(N//2)]
E = [[random.randint(-10, 10) for _ in range(N//2)] for _ in range(N//2)]

fill_matrix(A, B, C, D, E, N)
print("Матрица A:")
for row in A:
    print(row)

F = E.copy()
greater_count = count_greater_than_K(E, K, (0, 0, N//2, N//2))
sum_odd_rows = sum([sum(row) for i, row in enumerate(C) if i % 2 != 0])
if greater_count > sum_odd_rows:
    swap_submatrices(E, (0, 0), (N//2, N//2))
else:
    B, C = C, B

print("Матрица F:")
for row in F:
    print(row)

result = [[0 for _ in range(N)] for _ in range(N)]
AT = list(zip(*A))
for i in range(len(A)):
    for j in range(len(A[0])):
        result[i][j] = A[i][j]*F[i][j] - K*A^T[i][j]

print("Результат операции A*F - K*A^T:")
for row in result:
    print(row)
